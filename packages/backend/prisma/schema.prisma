generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime 

  auth    Auth   @relation(fields: [authId], references: [id])
  authId  Int    @unique

  bills  Bill[]
}

model Auth {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  
  user    User?

}

// Is this the trick? What do you call a table, if not a table. :-)
// Prisma supports Table, somehow, but seems like a future problem waiting to happen.
model RestaurantTable {
  id       Int     @id @default(autoincrement())
  tableNo  Int
  active   Boolean @default(false)

  bills   Bill[]
}

model Bill {
  id        Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime 

  restaurantTable    RestaurantTable    @relation(fields: [restaurantTableId], references: [id])
  restaurantTableId  Int


  items    MenuItem[]

  user    User    @relation(fields: [userId], references: [id])
  userId  Int
}

model MenuItem {
  id        Int     @id @default(autoincrement())
  name      String
  price     Float
  category  String

  bills Bill[]
}

// Prisma handles Many to Many relationships by creating a join table.
//
// If it didn't I'd create a bridge table like below:
//
// model BillMenuItem {
//   id        Int     @id @default(autoincrement())
// 
//   bill    Bill    @relation(fields: [billId], references: [id])
//   billId  Int
// 
//   menuItem    MenuItem    @relation(fields: [menuItemId], references: [id])
//   menuItemId  Int
// }
//

